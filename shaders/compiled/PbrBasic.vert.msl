#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];

    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }

    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }

    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }

    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct TranformBlock
{
    float4x4 modelView;
    float4x4 mvp;
    float3x3 normalMatrix;
};

struct LightBlockV
{
    float4x4 mvp[2];
    int numLights;
};

struct main0_out
{
    float3 fragViewPos [[user(locn0)]];
    float3 fragViewNormal [[user(locn1)]];
    float3 fragLightPos_0 [[user(locn2)]];
    float3 fragLightPos_1 [[user(locn3)]];
    float4 gl_Position [[position, invariant]];
};

struct main0_in
{
    float3 inPosition [[attribute(0)]];
    float3 inNormal [[attribute(1)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant TranformBlock& _25 [[buffer(0)]], constant LightBlockV& lights [[buffer(1)]])
{
    main0_out out = {};
    spvUnsafeArray<float3, 2> fragLightPos = {};
    float4 hp = float4(in.inPosition, 1.0);
    out.fragViewPos = float3((_25.modelView * hp).xyz);
    out.fragViewNormal = fast::normalize(_25.normalMatrix * in.inNormal);
    float4 _53 = _25.mvp * hp;
    out.gl_Position = _53;
    for (uint i = 0u; i < uint(lights.numLights); i++)
    {
        float4 flps = lights.mvp[i] * hp;
        fragLightPos[i] = flps.xyz / float3(flps.w);
    }
    out.fragLightPos_0 = fragLightPos[0];
    out.fragLightPos_1 = fragLightPos[1];
    return out;
}
