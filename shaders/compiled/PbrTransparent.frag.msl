#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct PbrMaterial
{
    float4 baseColor;
    float metalness;
    float roughness;
    float ao;
};

struct LightBlock
{
    float3 direction[4];
    float3 color[4];
    float4 intensity[4];
    int numLights;
};

struct PbrMaterial_1
{
    float4 baseColor;
    float metalness;
    float roughness;
    float ao;
};

struct Material
{
    PbrMaterial_1 material;
};

struct EffectParams
{
    uint useSsao;
};

struct main0_out
{
    float4 accum [[color(0)]];
    float reveal [[color(1)]];
};

struct main0_in
{
    float3 fragViewPos [[user(locn0)]];
    float3 fragViewNormal [[user(locn1)]];
};

static inline __attribute__((always_inline))
float distributionGGX(thread const float3& normal, thread const float3& H, thread const float& roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = fast::max(dot(normal, H), 0.0);
    float NdotH2 = NdotH * NdotH;
    float denom = (NdotH2 * (a2 - 1.0)) + 1.0;
    denom = (3.1415927410125732421875 * denom) * denom;
    return a2 / denom;
}

static inline __attribute__((always_inline))
float geometrySchlickGGX(thread const float& NdotV, thread const float& roughness)
{
    float r = roughness + 1.0;
    float k = (r * r) / 8.0;
    float num = NdotV;
    float denom = (NdotV * (1.0 - k)) + k;
    return num / denom;
}

static inline __attribute__((always_inline))
float geometrySmith(thread const float3& normal, thread const float3& V, thread const float3& L, thread const float& roughness)
{
    float NdotV = fast::max(dot(normal, V), 0.0);
    float NdotL = fast::max(dot(normal, L), 0.0);
    float param = NdotV;
    float param_1 = roughness;
    float ggx2 = geometrySchlickGGX(param, param_1);
    float param_2 = NdotL;
    float param_3 = roughness;
    float ggx1 = geometrySchlickGGX(param_2, param_3);
    return ggx1 * ggx2;
}

static inline __attribute__((always_inline))
float3 fresnelSchlick(thread const float& cosTheta, thread const float3& F0)
{
    return F0 + ((float3(1.0) - F0) * powr(fast::clamp(1.0 - cosTheta, 0.0, 1.0), 5.0));
}

static inline __attribute__((always_inline))
float3 calculatePbrLighting(thread const float3& normal, thread const float3& V, thread const float3& lightDir, thread const PbrMaterial& material, thread const float3& lightColor, thread const float& lightIntensity)
{
    float3 H = fast::normalize(lightDir + V);
    float3 specColor = mix(float3(0.039999999105930328369140625), material.baseColor.xyz, float3(material.metalness));
    float3 param = normal;
    float3 param_1 = H;
    float param_2 = material.roughness;
    float NDF = distributionGGX(param, param_1, param_2);
    float3 param_3 = normal;
    float3 param_4 = V;
    float3 param_5 = lightDir;
    float param_6 = material.roughness;
    float G = geometrySmith(param_3, param_4, param_5, param_6);
    float param_7 = fast::max(dot(H, V), 0.0);
    float3 param_8 = specColor;
    float3 F = fresnelSchlick(param_7, param_8);
    float denominator = (4.0 * fast::max(dot(normal, V), dot(normal, lightDir))) + 9.9999997473787516355514526367188e-05;
    float3 specular = (F * (NDF * G)) / float3(denominator);
    float3 kS = F;
    float3 kD = float3(1.0) - kS;
    kD *= (1.0 - material.metalness);
    float NdotL = fast::max(dot(normal, lightDir), 0.0);
    float3 lightCol = lightColor * lightIntensity;
    return ((((kD * material.baseColor.xyz) / float3(3.1415927410125732421875)) + specular) * lightCol) * NdotL;
}

static inline __attribute__((always_inline))
float3 uncharted2ToneMapping_Partial(thread const float3& color)
{
    float A = 0.1500000059604644775390625;
    float B = 0.5;
    float C = 0.100000001490116119384765625;
    float D = 0.20000000298023223876953125;
    float E = 0.0199999995529651641845703125;
    float F = 0.300000011920928955078125;
    return (((color * ((color * A) + float3(C * B))) + float3(D * E)) / ((color * ((color * A) + float3(B))) + float3(D * F))) - float3(E / F);
}

static inline __attribute__((always_inline))
float3 uncharted2ToneMapping(thread const float3& color)
{
    float exposure_bias = 2.0;
    float3 param = color * exposure_bias;
    float3 curr = uncharted2ToneMapping_Partial(param);
    float3 W = float3(11.19999980926513671875);
    float3 param_1 = W;
    float3 white_scale = float3(1.0) / uncharted2ToneMapping_Partial(param_1);
    return curr * white_scale;
}

fragment main0_out main0(main0_in in [[stage_in]], constant Material& _370 [[buffer(0)]], constant LightBlock& light [[buffer(1)]], float4 gl_FragCoord [[position]])
{
    main0_out out = {};
    float3 normal = fast::normalize(in.fragViewNormal);
    float3 V = fast::normalize(-in.fragViewPos);
    float3 Lo = float3(0.0);
    for (uint i = 0u; i < uint(light.numLights); i++)
    {
        float3 lightDir = fast::normalize(-light.direction[i]);
        float3 param = normal;
        float3 param_1 = V;
        float3 param_2 = lightDir;
        PbrMaterial _383;
        _383.baseColor = _370.material.baseColor;
        _383.metalness = _370.material.metalness;
        _383.roughness = _370.material.roughness;
        _383.ao = _370.material.ao;
        PbrMaterial param_3 = _383;
        float3 param_4 = light.color[i];
        float param_5 = light.intensity[i].x;
        Lo += calculatePbrLighting(param, param_1, param_2, param_3, param_4, param_5);
    }
    float3 ambient = (float3(0.02999999932944774627685546875) * _370.material.baseColor.xyz) * _370.material.ao;
    float3 color = ambient + Lo;
    float3 param_6 = color;
    color = uncharted2ToneMapping(param_6);
    color = powr(color, float3(0.4545454680919647216796875));
    float alpha = _370.material.baseColor.w;
    float z = gl_FragCoord.z;
    float w1 = (alpha * 10.0) + 0.00999999977648258209228515625;
    float weight = fast::clamp(w1 * (1.0 - (z * 0.300000011920928955078125)), 0.00999999977648258209228515625, 1000.0);
    out.accum = float4((color * alpha) * weight, alpha);
    out.reveal = 1.0 - (alpha * weight);
    return out;
}
