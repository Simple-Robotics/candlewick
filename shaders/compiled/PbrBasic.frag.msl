#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];

    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }

    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }

    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }

    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct PbrMaterial
{
    float4 baseColor;
    float metalness;
    float roughness;
    float ao;
};

struct ShadowAtlasInfo
{
    int4 lightRegions[2];
    uint2 atlasSize;
};

struct LightBlock
{
    float3 direction[2];
    float3 color[2];
    float4 intensity[2];
    int numLights;
};

struct PbrMaterial_1
{
    float4 baseColor;
    float metalness;
    float roughness;
    float ao;
};

struct Material
{
    PbrMaterial_1 material;
};

struct EffectParams
{
    uint useSsao;
};

struct main0_out
{
    float4 fragColor [[color(0)]];
    float2 outNormal [[color(1)]];
};

struct main0_in
{
    float3 fragViewPos [[user(locn0)]];
    float3 fragViewNormal [[user(locn1)]];
    float3 fragLightPos_0 [[user(locn2)]];
    float3 fragLightPos_1 [[user(locn3)]];
};

static inline __attribute__((always_inline))
float distributionGGX(thread const float3& normal, thread const float3& H, thread const float& roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = fast::max(dot(normal, H), 0.0);
    float NdotH2 = NdotH * NdotH;
    float denom = (NdotH2 * (a2 - 1.0)) + 1.0;
    denom = (3.1415927410125732421875 * denom) * denom;
    return a2 / denom;
}

static inline __attribute__((always_inline))
float geometrySchlickGGX(thread const float& NdotV, thread const float& roughness)
{
    float r = roughness + 1.0;
    float k = (r * r) / 8.0;
    float num = NdotV;
    float denom = (NdotV * (1.0 - k)) + k;
    return num / denom;
}

static inline __attribute__((always_inline))
float geometrySmith(thread const float3& normal, thread const float3& V, thread const float3& L, thread const float& roughness)
{
    float NdotV = fast::max(dot(normal, V), 0.0);
    float NdotL = fast::max(dot(normal, L), 0.0);
    float param = NdotV;
    float param_1 = roughness;
    float ggx2 = geometrySchlickGGX(param, param_1);
    float param_2 = NdotL;
    float param_3 = roughness;
    float ggx1 = geometrySchlickGGX(param_2, param_3);
    return ggx1 * ggx2;
}

static inline __attribute__((always_inline))
float3 fresnelSchlick(thread const float& cosTheta, thread const float3& F0)
{
    return F0 + ((float3(1.0) - F0) * powr(fast::clamp(1.0 - cosTheta, 0.0, 1.0), 5.0));
}

static inline __attribute__((always_inline))
float3 calculatePbrLighting(thread const float3& normal, thread const float3& V, thread const float3& lightDir, thread const PbrMaterial& material, thread const float3& lightColor, thread const float& lightIntensity)
{
    float3 H = fast::normalize(lightDir + V);
    float3 specColor = mix(float3(0.039999999105930328369140625), material.baseColor.xyz, float3(material.metalness));
    float3 param = normal;
    float3 param_1 = H;
    float param_2 = material.roughness;
    float NDF = distributionGGX(param, param_1, param_2);
    float3 param_3 = normal;
    float3 param_4 = V;
    float3 param_5 = lightDir;
    float param_6 = material.roughness;
    float G = geometrySmith(param_3, param_4, param_5, param_6);
    float param_7 = fast::max(dot(H, V), 0.0);
    float3 param_8 = specColor;
    float3 F = fresnelSchlick(param_7, param_8);
    float denominator = (4.0 * fast::max(dot(normal, V), dot(normal, lightDir))) + 9.9999997473787516355514526367188e-05;
    float3 specular = (F * (NDF * G)) / float3(denominator);
    float3 kS = F;
    float3 kD = float3(1.0) - kS;
    kD *= (1.0 - material.metalness);
    float NdotL = fast::max(dot(normal, lightDir), 0.0);
    float3 lightCol = lightColor * lightIntensity;
    return ((((kD * material.baseColor.xyz) / float3(3.1415927410125732421875)) + specular) * lightCol) * NdotL;
}

static inline __attribute__((always_inline))
bool isCoordsInRange(thread const float3& uv)
{
    bool _69 = uv.x >= 0.0;
    bool _76;
    if (_69)
    {
        _76 = uv.y >= 0.0;
    }
    else
    {
        _76 = _69;
    }
    bool _83;
    if (_76)
    {
        _83 = uv.x <= 1.0;
    }
    else
    {
        _83 = _76;
    }
    bool _89;
    if (_83)
    {
        _89 = uv.y <= 1.0;
    }
    else
    {
        _89 = _83;
    }
    bool _96;
    if (_89)
    {
        _96 = uv.z >= 0.0;
    }
    else
    {
        _96 = _89;
    }
    bool _102;
    if (_96)
    {
        _102 = uv.z <= 1.0;
    }
    else
    {
        _102 = _96;
    }
    return _102;
}

static inline __attribute__((always_inline))
float calcShadowmap(thread const int& lightIndex, thread const float& NdotL, thread spvUnsafeArray<float3, 2>& fragLightPos, constant ShadowAtlasInfo& _420, depth2d<float> shadowMap, sampler shadowMapSmplr)
{
    float bias0 = 0.004999999888241291046142578125;
    float3 lightSpacePos = fragLightPos[lightIndex];
    float2 uv;
    uv.x = 0.5 + (lightSpacePos.x * 0.5);
    uv.y = 0.5 - (lightSpacePos.y * 0.5);
    float depthRef = lightSpacePos.z - bias0;
    float3 param = float3(uv, depthRef);
    if (!isCoordsInRange(param))
    {
        return 1.0;
    }
    int4 region = _420.lightRegions[lightIndex];
    uv = float2(region.xy) + (uv * float2(region.zw));
    uv /= float2(_420.atlasSize);
    float3 texCoords = float3(uv, depthRef);
    return shadowMap.sample_compare(shadowMapSmplr, texCoords.xy, texCoords.z);
}

static inline __attribute__((always_inline))
float3 uncharted2ToneMapping_Partial(thread const float3& color)
{
    float A = 0.1500000059604644775390625;
    float B = 0.5;
    float C = 0.100000001490116119384765625;
    float D = 0.20000000298023223876953125;
    float E = 0.0199999995529651641845703125;
    float F = 0.300000011920928955078125;
    return (((color * ((color * A) + float3(C * B))) + float3(D * E)) / ((color * ((color * A) + float3(B))) + float3(D * F))) - float3(E / F);
}

static inline __attribute__((always_inline))
float3 uncharted2ToneMapping(thread const float3& color)
{
    float exposure_bias = 2.0;
    float3 param = color * exposure_bias;
    float3 curr = uncharted2ToneMapping_Partial(param);
    float3 W = float3(11.19999980926513671875);
    float3 param_1 = W;
    float3 white_scale = float3(1.0) / uncharted2ToneMapping_Partial(param_1);
    return curr * white_scale;
}

fragment main0_out main0(main0_in in [[stage_in]], constant Material& _505 [[buffer(0)]], constant LightBlock& light [[buffer(1)]], constant EffectParams& params [[buffer(2)]], constant ShadowAtlasInfo& _420 [[buffer(3)]], depth2d<float> shadowMap [[texture(0)]], texture2d<float> ssaoTex [[texture(1)]], sampler shadowMapSmplr [[sampler(0)]], sampler ssaoTexSmplr [[sampler(1)]], bool gl_FrontFacing [[front_facing]], float4 gl_FragCoord [[position]])
{
    main0_out out = {};
    spvUnsafeArray<float3, 2> fragLightPos = {};
    fragLightPos[0] = in.fragLightPos_0;
    fragLightPos[1] = in.fragLightPos_1;
    float3 normal = fast::normalize(in.fragViewNormal);
    float3 V = fast::normalize(-in.fragViewPos);
    if (!gl_FrontFacing)
    {
        normal = -normal;
    }
    float3 Lo = float3(0.0);
    for (int i = 0; i < light.numLights; i++)
    {
        float3 lightDir = fast::normalize(-light.direction[i]);
        float3 param = normal;
        float3 param_1 = V;
        float3 param_2 = lightDir;
        PbrMaterial _518;
        _518.baseColor = _505.material.baseColor;
        _518.metalness = _505.material.metalness;
        _518.roughness = _505.material.roughness;
        _518.ao = _505.material.ao;
        PbrMaterial param_3 = _518;
        float3 param_4 = light.color[i];
        float param_5 = light.intensity[i].x;
        float3 _lo = calculatePbrLighting(param, param_1, param_2, param_3, param_4, param_5);
        float NdotL = fast::max(dot(normal, lightDir), 0.0);
        int param_6 = i;
        float param_7 = NdotL;
        float shadowValue = calcShadowmap(param_6, param_7, fragLightPos, _420, shadowMap, shadowMapSmplr);
        _lo *= shadowValue;
        Lo += _lo;
    }
    float3 ambient = (float3(0.100000001490116119384765625) * _505.material.baseColor.xyz) * _505.material.ao;
    if (params.useSsao == 1u)
    {
        float2 ssaoTexSize = float2(int2(ssaoTex.get_width(), ssaoTex.get_height()));
        float2 ssaoUV = gl_FragCoord.xy / ssaoTexSize;
        ambient *= ssaoTex.sample(ssaoTexSmplr, ssaoUV).x;
    }
    float3 color = ambient + Lo;
    float3 param_8 = color;
    color = uncharted2ToneMapping(param_8);
    color = powr(color, float3(0.4545454680919647216796875));
    out.fragColor = float4(color, _505.material.baseColor.w);
    out.outNormal = in.fragViewNormal.xy;
    return out;
}
